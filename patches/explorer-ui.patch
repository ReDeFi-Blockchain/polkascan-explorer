diff --git a/src/app/pages/network/explorer/transfer/transfer-list/transfer-list.component.ts b/src/app/pages/network/explorer/transfer/transfer-list/transfer-list.component.ts
index d7e30ea..5e18b57 100644
--- a/src/app/pages/network/explorer/transfer/transfer-list/transfer-list.component.ts
+++ b/src/app/pages/network/explorer/transfer/transfer-list/transfer-list.component.ts
@@ -301,11 +301,9 @@ export class TransferListComponent extends PaginatedListComponentBase<pst.Event
       const amounts: eventAmounts = [];
 
       if (typeof attributes === 'string') {
-        for (let name of attrNames) {
-          const match = new RegExp(`"${name}": ?\"?(\\d+)\"?`).exec(attributes);
-          if (match) {
-            amounts.push([name, new BN(match[1])]);
-          }
+        const match = new RegExp(/\"(amount|actual_fee|actualFee|tip)\": ?\"?([+\-]?(\d+\.\d*|\d*\.\d+|\d+)([eE][+\-]?\d+)?)\"?/).exec(attributes);
+        if (match) {
+          amounts.push([match[1], new BN(this.scientificNotationToNormal(match[2]))]);
         }
       } else if (Object.prototype.toString.call(attributes) == '[object Object]') {
         attrNames.forEach((name) => {
@@ -344,6 +342,57 @@ export class TransferListComponent extends PaginatedListComponentBase<pst.Event
     return observable;
   }
 
+  // BN.js issue: https://github.com/indutny/bn.js/issues/209
+  // Code from: https://gist.github.com/jiggzson/b5f489af9ad931e3d186
+  scientificNotationToNormal(num: string) {
+    function stripSign(str: any) {
+      // Check if it has a minus sign
+      let hasMinus = str.charAt(0) === '-';
+      // Remove it if it does
+      if (hasMinus || str.charAt(0) === '+') {
+          str = str.substring(1);
+      }
+      return [hasMinus, str];
+    }
+
+    function scientificToDecimal(str: any) {
+      if (/\d+\.?\d*e[\+\-]*\d+/i.test(str)) {
+          let isNegative, isSmall;
+          // Remove the sign by slicing the string
+          [isNegative, str] = stripSign(str);
+          // Split it into coefficient and exponent
+          let [c, e] = str.toLowerCase().split('e');
+          // Split the coefficient into the whole and decimal portion
+          let [w, d] = c.split('.');
+          // Provide and empty sting for safety if in the form n(e)n
+          d = d || '';
+          // The total length of the string
+          let length = w.length + d.length;
+          // The total string minus the dot
+          let numString = w + d;
+          // If it's small then we need to calculate the leading zeros
+          // The shift of the decimal place to the left
+          const dotLocation = w.length + Number(e);
+          // Is the dot needed or not
+          const dot = dotLocation === length ? '' : '.';
+          let value;
+          if (dotLocation <= 0) {
+              // Join the value but pad after the dot with zeroes
+              value = `0${dot}${'0'.repeat(Math.abs(dotLocation))}${numString}`;
+          }
+          else if (dotLocation > length) {
+              value = `${numString}${'0'.repeat(Math.abs(dotLocation - length))}`;
+          }
+          else {
+              value = `${numString.substring(0, dotLocation)}${dot}${numString.substring(dotLocation)}`;
+          }
+          return isNegative ? '-' + value : value;
+      }
+      return str;
+    }
+
+    return scientificToDecimal(num);
+  }
 
   getAddressFromEvent(eventOrTransfer: pst.AccountEvent | pst.Event | pst.Transfer): Observable<eventAddresses> {
     const key = `${eventOrTransfer.blockNumber}_${eventOrTransfer.eventIdx}`;
diff --git a/src/common/attributes/attributes.component.ts b/src/common/attributes/attributes.component.ts
index c7546ec..f94ce6f 100644
--- a/src/common/attributes/attributes.component.ts
+++ b/src/common/attributes/attributes.component.ts
@@ -157,6 +157,30 @@ export class AttributesComponent implements OnChanges {
                 }
             }
             this.parsedAttributes = attrs;
+
+            // HACK(vklachkov):
+            // This component has a bug that causes the data to be built
+            // in a different order than the author expected.
+            // As a result, the balance is displayed in the sender's address
+            // field, and the sender is in the recipient's field.
+            // It's unclear how to fix this, and I don't understand how
+            // the machinery for displaying attributes is supposed to work at all.
+            if (Array.isArray(this.parsedAttributes)) {
+                if (
+                    this.parsedAttributes[0].name === 'amount' &&
+                    this.parsedAttributes[1].name === 'from' &&
+                    this.parsedAttributes[2].name === 'to' &&
+                    this.parsedAttributes[2].value.startsWith('0x')
+                ) {
+                    const from = this.parsedAttributes[0].value;
+                    const to = this.parsedAttributes[1].value;
+                    const amount = this.parsedAttributes[2].value;
+    
+                    this.parsedAttributes[0].value = amount;
+                    this.parsedAttributes[1].value = from;
+                    this.parsedAttributes[2].value = to;
+                }
+            }
         }
     }
 }
diff --git a/src/common/attributes/attributes/attribute-balance.component.ts b/src/common/attributes/attributes/attribute-balance.component.ts
index 52ead50..8a8f3b2 100644
--- a/src/common/attributes/attributes/attribute-balance.component.ts
+++ b/src/common/attributes/attributes/attribute-balance.component.ts
@@ -17,12 +17,21 @@
  */
 
 import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';
+import { BN } from '@polkadot/util';
 
 @Component({
   selector: 'attribute-balance',
   template: `
     <ng-container *ngIf="attribute">
-      {{ tokenSymbol }} {{ convertedValue }}
+      <span *ngIf="integralPart && integralPart.length"
+            [title]="decimalPart.length ? integralPart + '.' + decimalPart : integralPart">
+        <span>{{ integralPart }}</span>
+        <span *ngIf="decimalPartCapped && decimalPartCapped.length">.<span class="balance-decimal-numbers">
+              <span>{{decimalPartCapped}}</span><span *ngIf="decimalPart.length > decimalPartCapped.length">&mldr;</span>
+        </span>
+        </span>
+        {{ tokenSymbol }}
+      </span>
     </ng-container>
   `,
   encapsulation: ViewEncapsulation.None,
@@ -33,8 +42,11 @@ export class AttributeBalanceComponent implements OnChanges {
   @Input() tokenDecimals: number;
   @Input() tokenSymbol: string;
 
-  convertedValue: number | null;
   private decimals: number;
+  
+  integralPart: string;
+  decimalPart: string;
+  decimalPartCapped: string;
 
   constructor() {
   }
@@ -45,15 +57,51 @@ export class AttributeBalanceComponent implements OnChanges {
     }
 
     if (changes['tokenDecimals'] || changes['attribute'] || changes['decimals']) {
-      let converted: number | null;
+      this.formatValue();
+    }
+  }
+
+  formatValue() {
+    if (typeof this.attribute.value !== 'string') {
+      return
+    }
 
+    let val: BN | undefined;
+    if (BN.isBN(this.attribute.value)) {
+      val = this.attribute.value;
+    } else {
       try {
-        converted = Math.max(0, parseInt(this.attribute.value as string, 10)) / Math.pow(10, this.decimals);
+        if (this.attribute.value.startsWith('0x')) {
+          val = new BN(this.attribute.value.substring(2), 'hex');
+        } else {
+          val = new BN(this.attribute.value);
+        }
       } catch (e) {
-        converted = null;
+        this.integralPart = '';
+        this.decimalPart = '';
+        this.decimalPartCapped = '';
+        return;
       }
+    }
+
+    if (val) {
+      if (val.isZero()) {
+        this.integralPart = '0';
+        this.decimalPart = '';
+        this.decimalPartCapped = '';
+      } else {
+        const stringified = val.toString(undefined, this.decimals + 1); // String gets added preceding zeros.
 
-      this.convertedValue = converted;
+        const l = stringified.length;
+        // Split the string in two parts where the decimal point is expected.
+        this.integralPart = stringified.substring(0, l - this.decimals).replace(/^0+\B/, ''); // remove preceding zeros, but allow a value of '0'.
+        this.decimalPart = stringified.substring(l - this.decimals).replace(/0+$/, ''); // remove leading zeros
+
+        // Make a short readable decimal value.
+        // /(^0{1}[1-9]{1}\d{1})|(^0{2}[1-9]{1})|(^0+[1-9]{1})|(^\d{1,3})/  earlier used regex.
+        const cappedResult = this.decimalPart.match(new RegExp(`\\d{0,${this.decimals}}`));
+        this.decimalPartCapped = cappedResult && cappedResult[0] ? cappedResult[0] : '';
+      }
     }
   }
 }
